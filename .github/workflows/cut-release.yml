name: Release MgElectron
permissions:
  # needed for publishing artifacts
  contents: write

on:
  # Allow the workflow to be run manually.
  workflow_dispatch:
    inputs:
      electron-version:
        type: string
        required: true
      mighty-patch:
        type: string
        required: true
      skip-sentry:
        required: false
        type: boolean
        default: false
  # No automations yet!!
  # ðŸš¨ Be very careful with these, as this is a public repo.
  #    See: https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#self-hosted-runner-security

env:
  node-version: '14'
  python-version: '3.10'

# Jobs should use the following dist-cache-key formats:
# win32, linux: `dist-${{ inputs.electron-version }}-${{ matrix.platform-arch }}`
# darwin: `dist-${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}-${{ matrix.platform-arch }}`

jobs:
  # TODO - implement this
  # find-or-create-release:
  #   name: Find or create mightyapp/electron release
  #   steps:
  #     - name: Make and push a commit, iff needed
  #     - name: Find or create release

  # todo - skip iff release existed
  load-or-build-artifacts:
    name: Load or build Electron artifacts for supported platforms
    # TODO - re-enable this
    # needs: find-or-create-release
    strategy:
      matrix:
        platform-arch: [win32-x64, linux-x64]
        # TODO - re-enable the full list; once the self-hosted runner is available
        # platform-arch: [win32-x64, linux-x64, darwin-x64, darwin-arm64]
    runs-on: ${{ startsWith(matrix.platform-arch, 'darwin-') && 'macos-latest' || 'ubuntu-18.04' }}
    steps:
      - name: Set version string
        run: |
          echo "version_string=${{ inputs.electron-version }}-${{ matrix.platform-arch }}" >> $GITHUB_ENV
          echo "dist_cache_key=${{ inputs.electron-version }}-${{ matrix.platform-arch }}" >> $GITHUB_ENV
      - name: Override dist cache key for macOS builds
        if: ${{ startsWith(matrix.platform-arch, 'darwin') }}
        run: |
          echo "dist_cache_key=${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}-${{ matrix.platform-arch }}" >> $GITHUB_ENV
      - name: Setup cache for built output (dist)
        id: dist-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/electron-v${{ env.version_string }}.zip
          key: dist-${{ env.dist_cache_key }}
      - name: Download upstream dist (non-darwin)
        # iff we didn't hit cache && are not on darwin (macOS)
        if: ${{ steps.dist-cache.outputs.cache-hit != 'true' && !startsWith(matrix.platform-arch, 'darwin-') }}
        run: |
          curl -L -O https://github.com/electron/electron/releases/download/v${{ inputs.electron-version }}/electron-v${{ env.version_string }}.zip
      - name: Prepare our build env (darwin-only)
        # iff we didn't hit cache && are on darwin (macOS)
        if: ${{ steps.dist-cache.outputs.cache-hit != 'true' && startsWith(matrix.platform-arch, 'darwin-') }}
        uses: ./.github/actions/prepare-build-env
      - name: Build our own dist (darwin-only)
        # iff we didn't hit cache && are on darwin (macOS)
        if: ${{ steps.dist-cache.outputs.cache-hit != 'true' && startsWith(matrix.platform-arch, 'darwin-') }}
        uses: ./.github/actions/build
        id: build-job
        with:
          platform-arch: ${{ matrix.platform-arch }}
          dist-cache-key: ${{ env.dist_cache_key }}
          sentry-token: ${{ secrets.SENTRY_TOKEN }}
      - name: Move our dist into the cache (darwin-only)
        # iff we didn't hit cache && are on darwin (macOS)
        if: ${{ steps.dist-cache.outputs.cache-hit != 'true' && startsWith(matrix.platform-arch, 'darwin-') }}
        run: |
          mv ${{ github.workspace }}/src/out/Release/dist.zip ${{ github.workspace }}/electron-v${{ env.version_string }}.zip
      - name: Publish artifact to release for ${{ matrix.platform-arch }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/electron-v${{ env.version_string }}.zip
          asset_name: electron-v${{ env.version_string }}.zip
          tag: v${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}
          overwrite: true

  # n.b. We published each build's artifacts alongside the build step
  # so we can more easily deal with matrices.
  release:
    name: Finalize mightyapp/electron release
    needs: load-or-build-artifacts
    runs-on: ubuntu-18.04
    steps:
      - name: Fetch win32-x64 cached output
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/electron-v${{ inputs.electron-version }}-win32-x64.zip
          # keep in sync with TKTK
          key: dist-${{ inputs.electron-version }}-win32-x64
      - name: Fetch linux-x64 cached output
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/electron-v${{ inputs.electron-version }}-linux-x64.zip
          # keep in sync with TKTK
          key: dist-${{ inputs.electron-version }}-linux-x64
      - name: Fetch darwin-x64 cached output
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/electron-v${{ inputs.electron-version }}-darwin-x64.zip
          # keep in sync with TKTK
          key: dist-${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}-darwin-x64
      - name: Fetch darwin-arm64 cached output
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/electron-v${{ inputs.electron-version }}-darwin-arm64.zip
          # keep in sync with TKTK
          key: dist-${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}-darwin-arm64
      # TODO - do we need to check for cache misses and otherwise download artifacts here?
      #        i'm guessing not, since we depend on `load-or-build` which manages cache
      - name: Update checksums
        run: |
          shasum -a 256 electron-v*.zip | sed 's/  / */g' > ${{ github.workspace }}/SHASUMS256.txt
      - name: Publish CHECKSUMS file
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/SHASUMS256.txt
          # TODO - restore this
          # asset_name: SHASUMS256.txt
          asset_name: SHASUMS256-FAKE.txt
          tag: v${{ inputs.electron-version }}-mighty.${{ inputs.mighty-patch }}
          overwrite: true
