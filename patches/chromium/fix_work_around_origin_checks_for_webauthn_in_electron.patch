From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Eric Rahm <ericrahm@gmail.com>
Date: Fri, 10 Dec 2021 09:46:36 -0800
Subject: fix: Work around origin checks for WebAuthn in Electron

In Electron the app itself does not have an `https` or `http` scheme. Regardless it should be able to participate in WebAuthn. This is a rather blunt work-around until a finer grained approach is figured out.

diff --git a/content/browser/webauth/webauth_request_security_checker.cc b/content/browser/webauth/webauth_request_security_checker.cc
index c2c9972187d8f42f1e859d4ef5a35274c69dafa3..c985f28f0d1f93e64a79c10cae35d02fe571ff31 100644
--- a/content/browser/webauth/webauth_request_security_checker.cc
+++ b/content/browser/webauth/webauth_request_security_checker.cc
@@ -57,7 +57,9 @@ blink::mojom::AuthenticatorStatus ValidateEffectiveDomain(
   // above, HTTP is effectively restricted to just "localhost".
   if (caller_origin.scheme() != url::kHttpScheme &&
       caller_origin.scheme() != url::kHttpsScheme) {
+#if 0
     return blink::mojom::AuthenticatorStatus::INVALID_PROTOCOL;
+#endif
   }
 
   return blink::mojom::AuthenticatorStatus::SUCCESS;
@@ -71,6 +73,7 @@ blink::mojom::AuthenticatorStatus ValidateEffectiveDomain(
 absl::optional<std::string> GetRelyingPartyId(
     const std::string& claimed_relying_party_id,
     const url::Origin& caller_origin) {
+#if 0
   if (WebAuthRequestSecurityChecker::OriginIsCryptoTokenExtension(
           caller_origin)) {
     // This code trusts cryptotoken to handle the validation itself.
@@ -103,6 +106,7 @@ absl::optional<std::string> GetRelyingPartyId(
     return absl::nullopt;
   }
 
+#endif
   return claimed_relying_party_id;
 }
 
diff --git a/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc b/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
index e1f614b6303f371e93292c7ea0d12e184cdd3c5a..81f7816aa02b22fbceeb66d565863bf9e280b9bc 100644
--- a/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
+++ b/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
@@ -169,6 +169,7 @@ bool IsAncestorChainValidForWebOTP(const Frame* frame) {
 bool CheckSecurityRequirementsBeforeRequest(
     ScriptPromiseResolver* resolver,
     RequiredOriginType required_origin_type) {
+#if 0
   // Ignore calls if the current realm execution context is no longer valid,
   // e.g., because the responsible document was detached.
   DCHECK(resolver->GetExecutionContext());
@@ -239,6 +240,7 @@ bool CheckSecurityRequirementsBeforeRequest(
       }
       break;
   }
+#endif
 
   return true;
 }
